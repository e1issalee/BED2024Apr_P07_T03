{
    "swagger": "2.0",
    "info": {
      "title": "NutriCooked API",
      "description": "API for NutriCooked",
      "version": "1.0.0"
    },
    "host": "localhost:3000",
    "basePath": "/",
    "schemes": [
      "http"
    ],
    "paths": {
      "/users/with-vouchers": {
        "get": {
          "summary": "Get users with vouchers",
          "description": "Returns a list of users along with their associated vouchers.",
          "responses": {
            "200": {
              "description": "Successful operation",
              "schema": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "userId": {
                      "type": "string"
                    },
                    "userName": {
                      "type": "string"
                    },
                    "vouchers": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "voucherId": {
                            "type": "string"
                          },
                          "voucherName": {
                            "type": "string"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "/users/login": {
        "post": {
          "summary": "Login a user",
          "description": "Logs in a user with the provided email and password.",
          "parameters": [
            {
              "name": "user",
              "in": "body",
              "description": "User login details",
              "required": true,
              "schema": {
                "type": "object",
                "properties": {
                  "email": {
                    "type": "string"
                  },
                  "password": {
                    "type": "string"
                  }
                }
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Login successful",
              "schema": {
                "type": "object",
                "properties": {
                  "token": {
                    "type": "string"
                  }
                }
              }
            },
            "401": {
              "description": "Invalid email or password"
            }
          }
        }
      },
      "/users/create": {
        "post": {
          "summary": "Create a new user",
          "description": "Creates a new user with the provided details.",
          "parameters": [
            {
              "name": "user",
              "in": "body",
              "description": "User object containing user details.",
              "required": true,
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string"
                  },
                  "email": {
                    "type": "string"
                  },
                  "password": {
                    "type": "string"
                  }
                }
              }
            }
          ],
          "responses": {
            "201": {
              "description": "User created successfully"
            },
            "400": {
              "description": "Invalid request body"
            }
          }
        }
      },
      "/users/with-vouchers/{id}": {
        "get": {
          "summary": "Get user with vouchers by ID",
          "description": "Returns a user with the specified ID along with their associated vouchers.",
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "description": "ID of the user to fetch.",
              "required": true,
              "type": "string"
            }
          ],
          "responses": {
            "200": {
              "description": "Successful operation",
              "schema": {
                "type": "object",
                "properties": {
                  "userId": {
                    "type": "string"
                  },
                  "userName": {
                    "type": "string"
                  },
                  "vouchers": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "voucherId": {
                          "type": "string"
                        },
                        "voucherName": {
                          "type": "string"
                        }
                      }
                    }
                  }
                }
              }
            },
            "404": {
              "description": "User not found"
            }
          }
        }
      },
      "/users/updatePointsAndVouchers/{id}": {
        "put": {
          "summary": "Update user points and vouchers",
          "description": "Updates the points and vouchers for the user with the specified ID.",
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "description": "ID of the user to update.",
              "required": true,
              "type": "string"
            },
            {
              "name": "data",
              "in": "body",
              "description": "Object containing the new points and vouchers.",
              "required": true,
              "schema": {
                "type": "object",
                "properties": {
                  "points": {
                    "type": "number"
                  },
                  "vouchers": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          ],
          "responses": {
            "200": {
              "description": "User updated successfully"
            },
            "400": {
              "description": "Invalid request body"
            },
            "404": {
              "description": "User not found"
            }
          }
        }
      },
      "/users/updateDailyCalories/{id}": {
        "put": {
          "summary": "Update user daily calories",
          "description": "Updates the daily calories for the user with the specified ID.",
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "description": "ID of the user to update.",
              "required": true,
              "type": "string"
            },
            {
              "name": "data",
              "in": "body",
              "description": "Object containing the new daily calories.",
              "required": true,
              "schema": {
                "type": "object",
                "properties": {
                  "dailyCalories": {
                    "type": "number"
                  }
                }
              }
            }
          ],
          "responses": {
            "200": {
              "description": "User updated successfully"
            },
            "400": {
              "description": "Invalid request body"
            },
            "404": {
              "description": "User not found"
            }
          }
        }
      },
      "/users/resetDailyCalories/{id}": {
        "put": {
          "summary": "Reset user daily calories",
          "description": "Resets the daily calories for the user with the specified ID to 0.",
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "description": "ID of the user to update.",
              "required": true,
              "type": "string"
            }
          ],
          "responses": {
            "200": {
              "description": "User daily calories reset successfully"
            },
            "404": {
              "description": "User not found"
            }
          }
        }
      },
      "/saveUserDetails": {
        "post": {
          "summary": "Save user details",
          "description": "Saves user details for the health report.",
          "parameters": [
            {
              "name": "authorization",
              "in": "header",
              "type": "string"
            },
            {
              "name": "userDetails",
              "in": "body",
              "description": "Details of the user to save",
              "required": true,
              "schema": {
                "type": "object",
                "properties": {
                  "userAge": {
                    "type": "integer"
                  },
                  "userHeight": {
                    "type": "decimal"
                  },
                  "userWeight": {
                    "type": "integer"
                  },
                  "userGender": {
                    "type": "F or M"
                  },
                  "userActivityLevel": {
                    "type": "Low  / Moderate / High"
                  }
                }
              }
            }
          ],
          "responses": {
            "200": {
              "description": "User details saved successfully"
            },
            "400": {
              "description": "Invalid request body"
            }
          }
        }
      },
      "/healthReport/{userID}": {
        "get": {
          "summary": "Get health report",
          "description": "Retrieves the health report for a specific user.",
          "parameters": [
            {
              "name": "userID",
              "in": "path",
              "description": "ID of the user",
              "required": true,
              "type": "string"
            }
          ],
          "responses": {
            "200": {
              "description": "Health report retrieved successfully"
            },
            "404": {
              "description": "User not found"
            }
          }
        }
      },
      "/deleteReport/{userID}": {
        "delete": {
          "summary": "Delete health report",
          "description": "Deletes the health report for a specific user.",
          "parameters": [
            {
              "name": "authorization",
              "in": "header",
              "type": "string"
            },
            {
              "name": "userID",
              "in": "path",
              "description": "ID of the user",
              "required": true,
              "type": "string"
            }
          ],
          "responses": {
            "200": {
              "description": "Health report deleted successfully"
            },
            "404": {
              "description": "User not found"
            }
          }
        }
      },
      "/userFeedback/createFeedback": {
        "post": {
          "summary": "Create user feedback",
          "description": "Creates feedback from a user.",
          "parameters": [
            {
              "name": "feedback",
              "in": "body",
              "description": "Feedback details",
              "required": true,
              "schema": {
                "type": "object",
                "properties": {
                  "userID": {
                    "type": "existing userID"
                  },
                  "comments": {
                    "type": "feedback comments"
                  }
                }
              }
            }
          ],
          "responses": {
            "201": {
              "description": "Feedback created successfully"
            },
            "400": {
              "description": "Invalid request body"
            }
          }
        }
      },
      "/forum/createPost": {
        "post": {
          "summary": "Create forum post",
          "description": "Creates a new post in the forum.",
          "parameters": [
            {
              "name": "post",
              "in": "body",
              "description": "Post details",
              "required": true,
              "schema": {
                "type": "object",
                "properties": {
                  "postContent": {
                    "type": "post content"
                  },
                  "timestamp": {
                    "type": "2024-07-28T00:00:00.000Z"
                  },
                  "userID": {
                    "type": "existing userID"
                  },
                  "userName": {
                    "type": "existing userName matching to userID"
                  }
                }
              }
            }
          ],
          "responses": {
            "201": {
              "description": "Post created successfully"
            },
            "400": {
              "description": "Invalid request body"
            }
          }
        }
      },
      "/forum/getAllPosts": {
        "get": {
          "summary": "Get all forum posts",
          "description": "Retrieves all posts from the forum.",
          "responses": {
            "200": {
              "description": "List of forum posts retrieved successfully"
            }
          }
        }
      },
      "/forum/getPostIdByContent": {
        "post": {
          "summary": "Get post ID by content",
          "description": "Retrieves the post ID for a post with specific content.",
          "parameters": [
            {
              "name": "postContent",
              "in": "body",
              "description": "Content of the post",
              "required": true,
              "schema": {
                "type": "object",
                "properties": {
                  "postContent": {
                    "type": "string"
                  }
                }
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Post ID retrieved successfully",
              "schema": {
                "type": "object",
                "properties": {
                  "postID": {
                    "type": "string"
                  }
                }
              }
            },
            "404": {
              "description": "Post not found"
            }
          }
        }
      },
      "/forum/editPost/{postID}": {
        "put": {
          "summary": "Edit forum post",
          "description": "Updates the content of a forum post.",
          "parameters": [
            {
              "name": "postID",
              "in": "path",
              "description": "ID of the post to edit",
              "required": true,
              "type": "string"
            },
            {
              "name": "post",
              "in": "body",
              "description": "New content of the post",
              "required": true,
              "schema": {
                "type": "object",
                "properties": {
                  "postID": {
                    "type": "string"
                  },
                  "userID": {
                    "type": "string"
                  },
                  "postContent": {
                    "type": "string"
                  }
                }
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Post updated successfully"
            },
            "400": {
              "description": "Invalid request body"
            },
            "404": {
              "description": "Post not found"
            }
          }
        }
      },
      "/food/{userId}/{tabName}": {
      "get": {
        "summary": "Get food items by userId and tabName",
        "description": "Retrieve food items for a specific user and tab",
        "parameters": [
          {
            "name": "authorization",
            "in": "header",
            "type": "string"
          },
          {
            "name": "userId",
            "in": "path",
            "description": "ID of the user",
            "required": true,
            "type": "integer"
          },
          {
            "name": "tabName",
            "in": "path",
            "description": "Name of the tab",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response with food items"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "User or tab not found"
          }
        }
      }
    },
    "/food": {
      "post": {
        "summary": "Add food item to tab",
        "description": "Create a new food item for a specific tab",
        "parameters": [
          {
            "name": "authorization",
            "in": "header",
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "description": "Food item to add",
            "required": true,
            "schema":  {
              "type": "object",
              "properties": {
                  "userId": {
                  "type": "integer"
                  },
                  "tabName": {
                    "type": "string"
                  },
                  "name": {
                    "type": "string"
                  },
                  "calories": {
                    "type": "number"
                  },
                  "servingSize": {
                    "type": "string"
                  },
                  "carbs": {
                    "type": "string"
                  },
                  "protein": {
                    "type": "string"
                  },
                  "fat": {
                    "type": "string"
                  },
                  "quantity": {
                    "type": "integer"
                  }
                }
             } 
          }
        ],
        "responses": {
          "201": {
            "description": "Food item created successfully"
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      },
      "get": {
        "summary": "Get all food items",
        "description": "Retrieve all food items",
        "responses": {
          "200": {
            "description": "Successful response with all food items"
          }
        }
      }
    },
    "/food/{id}": {
      "get": {
        "summary": "Get food item by ID",
        "description": "Retrieve a specific food item by its ID",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the food item",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response with food item"
          },
          "404": {
            "description": "Food item not found"
          }
        }
      },
      "put": {
        "summary": "Update food item quantity",
        "description": "Update the quantity of a specific food item",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the food item",
            "required": true,
            "type": "integer"
          },
          {
            "name": "body",
            "in": "body",
            "description": "New quantity of the food item",
            "required": true,
            "schema":  {
              "type": "object",
              "properties": {
              "quantity": {
                "type": "integer"
              }
            }
          }
        }
        ],
        "responses": {
          "200": {
            "description": "Food item quantity updated successfully"
          },
          "404": {
            "description": "Food item not found"
          }
        }
      }
    },
    "/nutrition": {
      "get": {
        "summary": "Get nutritional data",
        "description": "Fetch and display nutritional data from an external API",
        "parameters": [
        {
          "name": "query",
          "in": "query",
          "description": "Query string to search for nutritional data",
          "required": true,
          "type": "string"
        }
      ],
        "responses": {
          "200": {
            "description": "Successful response with nutritional data"
          }
        }
      }
    },
    "/deleteFoodItem/{id}": {
      "delete": {
        "summary": "Delete food item",
        "description": "Remove a specific food item",
        "parameters": [
          {
            "name": "authorization",
            "in": "header",
            "type": "string"
          },
          {
            "name": "id",
            "in": "path",
            "description": "ID of the food item",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "Food item deleted successfully"
          },
          "404": {
            "description": "Food item not found"
          }
        }
      }
    },
    "/tabNames": {
      "post": {
        "summary": "Save tab name",
        "description": "Save a new tab name",
        "parameters": [
          {
            "name": "authorization",
            "in": "header",
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "description": "Tab name to save",
            "required": true,
            "schema": {
              "properties": {
                "tabName": {
                "type": "string"
                }
              }
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Tab name saved successfully"
          }
        }
      }
    }
  }
}